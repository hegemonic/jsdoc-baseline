# Copyright 2014-2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
alphaList:
    _numeric: '0 to 9'
    _other: 'Other'
    a: 'A'
    b: 'B'
    c: 'C'
    d: 'D'
    e: 'E'
    f: 'F'
    g: 'G'
    h: 'H'
    i: 'I'
    j: 'J'
    k: 'K'
    l: 'L'
    m: 'M'
    n: 'N'
    o: 'O'
    p: 'P'
    q: 'Q'
    r: 'R'
    s: 'S'
    t: 'T'
    u: 'U'
    v: 'V'
    w: 'W'
    x: 'X'
    y: 'Y'
    z: 'Z'
brandDefault: 'Home'
constructor:
    prefix: 'new&nbsp;'
# TODO: Use built-in date formatter.
generatedBy: 'Generated by <a href="https://github.com/jsdoc3/jsdoc">JSDoc</a> {version} on {date}.'
headings:
    augments: 'Extends'
    authors: |
        {items, plural,
            =1 {Author}
            other {Authors}}
    childClasses: |
        {items, plural,
            =1 {Child class}
            other {Child classes}}
    childInterfaces: |
        {items, plural,
            =1 {Child interface}
            other {Child interfaces}}
    classes: |
        {items, plural,
            =1 {Class}
            other {Classes}}
    constructors: |
        {items, plural,
            =1 {Constructor}
            other {Constructors}}
    continued: '{text} <small>(continued)</small>'
    copyright: 'Copyright'
    defaultValue: 'Default value'
    deprecated: 'Deprecated'
    events: |
        {items, plural,
            =1 {Event}
            other {Events}}
    examples: |
        {items, plural,
            =1 {Example}
            other {Examples}}
    exports: 'Exports'
    externals: |
        {items, plural,
            =1 {External}
            other {Externals}}
    fires: 'Fires'
    functions: |
        {items, plural,
            =1 {Method}
            other {Methods}}
    globals: |
        {items, plural,
            =1 {Global}
            other {Globals}}
    implementations: 'Implemented by'
    implements: 'Implements'
    inheritedFrom: 'Inherited from'
    interfaces: |
        {items, plural,
            =1 {Interface}
            other {Interfaces}}
    license: 'License'
    listeners: |
        {items, plural,
            =1 {Listener}
            other {Listeners}}
    listens: 'Listens to'
    mixes: 'Mixes in'
    mixins: |
        {items, plural,
            =1 {Mixin}
            other {Mixins}}
    modules: |
        {items, plural,
            =1 {Module}
            other {Modules}}
    namespaces: |
        {items, plural,
            =1 {Namespace}
            other {Namespaces}}
    parameters: |
        {items, plural,
            =1 {Parameter}
            other {Parameters}}
    properties: |
        {items, plural,
            =1 {Property}
            other {Properties}}
    requires: 'Requires'
    returns: 'Returns'
    see: 'See also'
    since: 'Since'
    sources: |
        {items, plural,
            =1 {Source}
            other {Sources}}
    throws: 'Throws'
    todo: 'To do'
    type: 'Type'
    typedefs: |
        {items, plural,
            =1 {Abstract type}
            other {Abstract types}}
    version: 'Version'
    yields: 'Yields'
kinds:
    class: 'class'
    constant: 'constant'
    event: 'event'
    external: 'external'
    file: 'file'
    function: 'function'
    interface: 'interface'
    member: 'member'
    mixin: 'mixin'
    module: 'module'
    namespace: 'namespace'
    package: 'package'
    param: 'param'
    typedef: 'abstract type'
labels:
    async: 'async'
    constant: 'constant'
    generator: 'generator'
    inner: 'inner'
    package: 'package'
    private: 'private'
    protected: 'protected'
    public: 'public'
    readonly: 'read-only'
    static: 'static'
    virtual: 'abstract'
linkToLine: |
    {items, plural,
        =1 {{filepath}}
        other {{filepath}:{lineno}}}
pageTitle: '{prefix}{category}: {title}'
pageTitleNoCategory: '{prefix}{title}'
pageTitlePrefix: '{name} {version} &raquo; '
params:
    all: '({params})'
    joiner: |
        {items, plural,
            =0 {{param}}
            other {, {param}}}
    optional: '[{param}]'
    repeatable: '...{param}'
returnTypesSeparator: '&nbsp;&rarr; '
source: 'Source:'
tables:
    body:
        defaultValue: 'Defaults to {valueString}.'
        defaultValueString: '<code>{value}</code>'
        eachValueHasProperties: 'Values in <code>{name}</code> have the following properties:'
        isOptional: 'Yes'
        isRequired: '&nbsp;'
        nonNullable:
            long: 'Value must not be null.'
            short: 'non-null'
        nullable:
            long: 'Value can be null.'
            short: 'nullable'
        repeatable:
            long: 'Value can be repeated.'
            short: 'repeatable'
        unknownType: '?'
    emptyCellPlaceholder: '&nbsp;'
    header:
        description: 'Description'
        name: 'Name'
        optional: 'Optional'
        type: 'Type'
    notApplicable: '&#8212;'
